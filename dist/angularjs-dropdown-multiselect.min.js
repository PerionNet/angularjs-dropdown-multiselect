"use strict";var directiveModule=angular.module("angularjs-dropdown-multiselect",[]);directiveModule.directive("ngDropdownMultiselect",["$filter","$document","$compile","$parse","focus","$sessionStorage",function($filter,$document,$compile,$parse,focus,$sessionStorage){return{restrict:"AE",scope:{selectedModel:"=",selectedTempModel:"=",options:"=",extraSettings:"=",events:"=",disabled:"=",searchFilter:"=?",translationTexts:"=",groupBy:"@",selectedGroup:"@",showModes:"@",api:"=",isCustomDateOpen:"=",open:"=",dependency:"=",index:"=",disabledItems:"="},template:function(element,attrs,scope){var checkboxes=attrs.checkboxes?!0:!1,template='<div class="multiselect-parent btn-group dropdown-multiselect" arrow-selector>';template+='<button id="{{elementId}}_btn" type="button"  ng-disabled=disabled class="dropdown-toggle" ng-class="settings.buttonClasses" ng-click="toggleDropdown()">{{getButtonText(true)}}&nbsp;<span class="caret"></span></button>',template+='<ul id="{{elementId}}-multiselect-wrapper" class="dropdown-menu dropdown-menu-form" ng-if="open" ng-style="{height : settings.scrollable ? settings.scrollableHeight : \'auto\' }" style="overflow: scroll; display: block;" ',template+='infinite-scroll="addMoreItems()" ',template+='infinite-scroll-container="getInfiniteScrollContainer()" ',template+='infinite-scroll-distance="1" ',template+='infinite-scroll-immediate-check="false" >',template+='<li ng-show="settings.groupBy && settings.showModes" class="group-toggle"><a class="toggle-text" ng-class="{toggleTextSelected: selectedGroupKey}" ng-click="setGroupSelectOption(settings.groupKey)">{{settings.groupKey}} Mode</a>',template+='<a class="toggle-text" ng-class="{toggleTextSelected: !selectedGroupKey}" ng-click="setGroupSelectOption(settings.displayProp)">{{settings.displayProp}} Mode</a></li>',template+='<li ng-show="settings.enableSearch" class="dropdown-search-holder"><div class="dropdown-header"><input ng-change="clearSelectedRow()" id="{{elementId}}_search" type="text" class="form-control search-filter" style="width: 100%;" ng-model="searchFilter" placeholder="{{texts.searchPlaceholder}}" focus-on="focusInput"/></li>',template+='<li ng-show="settings.enableSearch" class="divider"></li>',template+='<li ng-show="settings.enableEmpty"></li>',template+='<li ng-hide="!settings.showCheckAll || settings.selectionLimit > 0"><a data-ng-click="selectAll(); checkedAll = true" id="{{elementId}}_checkAll"><span ng-class="{\'checkbox-ok\': isCheckedAll()}" class="checkbox"></span>{{texts.checkAll}}</a>',template+='<li ng-show="settings.showUncheckAll" class="uncheckAll-separator"><a data-ng-click="deselectAll(); checkedAll = false" id="{{elementId}}_uncheckAll"><span class="checkbox uncheck-all"></span>{{texts.uncheckAll}}</a></li>',template+='<li ng-hide="(!settings.showCheckAll || settings.selectionLimit > 0) && !settings.showUncheckAll" class="divider"></li>',template+='<li class="divider" ng-show="settings.selectionLimit > 1"></li>',template+='<li role="presentation" ng-show="settings.selectionLimit > 1" class="selection-indicator"><a role="menuitem">{{selectedModel.length}} {{texts.selectionOf}} {{settings.selectionLimit}} {{texts.selectionCount}}</a></li>',template+='<li ng-if="groups === true"><ul class="select-option-wrapper">',template+='<li ng-repeat="option in orderedItems | filter: searchFilter" class="multiselector-group-title" ng-class="{\'groupOpenedList\': openGroup}" ng-if="getPropertyForObject(orderedItems[$index], settings.groupBy) !== getPropertyForObject(orderedItems[$index-1], settings.groupBy)">',template+='<a  role="presentation" tabindex="-1" ng-click="groupTitleEvent(getPropertyForObject(option,settings.groupBy), !isCheckedGroup(getPropertyForObject(option,settings.groupBy)))" ng-mouseover="groupHovered=true" ng-mouseout="groupHovered=false">',template+='<span data-ng-class="{\'checkbox-ok\': isCheckedGroup(getPropertyForObject(option,settings.groupBy)), \'checkbox-minus\': isCheckedGroupPart(getPropertyForObject(option,settings.groupBy))}" class="checkbox" ng-click="groupCheckboxEvent(getPropertyForObject(option,settings.groupBy), !isCheckedGroup(getPropertyForObject(option,settings.groupBy)), $event)"></span>',template+=" {{getGroupTitle(getPropertyForObject(option, settings.groupBy)) | limitTo:settings.tooltipNumLimit}}</a> ",template+='<i class="group-arrow" ng-class="{\'arrow-opened\': openGroup}" ng-click="openGroup = !openGroup" ng-show="!selectedGroupKey"></i>',template+='<ul class="group-list"  ng-class="openGroup ? \'group-open\' : \'\'" ng-show="!selectedGroupKey">',template+='<li role="presentation"  ng-repeat="option in options | filter: getPropertyForObject(option,settings.groupBy)" tooltip-enable="checkDisabled($index)" uib-tooltip="{{option.disabledTooltip}}>',template+='<a id="{{elementId}}_option{{option.id}}" role="menuitem" tabindex="-1" ng-click="!checkDisabled($index) && setSelectedItem(getPropertyForObject(option,settings.idProp))" tooltip="{{getPropertyForObject(option, settings.displayProp)}}"  ng-class="{(getPropertyForObject(option, settings.displayProp).length > settings.tooltipNumLimit) ? \'shorten\' : \'\'; \'disabled\':checkDisabled($index)}" tooltip-enable="getPropertyForObject(option, settings.displayProp).length > settings.tooltipNumLimit">',template+='<span data-ng-class="{\'checkbox-ok\': isChecked(getPropertyForObject(option,settings.idProp))}" class="checkbox"></span>{{getPropertyForObject(option, settings.displayProp)}}</a>',template+="</li></ul>",template+="</li>",template+="</ul></li>",template+='<li ng-if="groups === false"><ul class="select-option-wrapper">',template+='<li role="presentation" ng-repeat="option in options | filter: searchFilter | limitTo: itemsDisplayedInList track by $index "   tooltip-enable="checkDisabled($index)" uib-tooltip="{{option.disabledTooltip}}" ng-class="{\'dropdown-multiselect-selected\':$index == selectedRow}">',template+='<a id="{{elementId}}_option{{option.id}}" role="menuitem" href="javascript:void(0)" ng-click="!checkDisabled($index) && setSelectedItem(getPropertyForObject(option,settings.idProp))" tooltip="{{getPropertyForObject(option, settings.displayProp)}}"  ng-class="{ \'shorten\':(getPropertyForObject(option, settings.displayProp).length > settings.tooltipNumLimit), \'disabled\':checkDisabled($index)}" tooltip-enable="getPropertyForObject(option, settings.displayProp).length > settings.tooltipNumLimit">',template+=checkboxes?'<div class="checkbox"><label><input class="checkboxInput" type="checkbox" ng-click="checkboxClick($event, getPropertyForObject(option,settings.idProp))" ng-checked="isChecked(getPropertyForObject(option,settings.idProp))" /> {{getPropertyForObject(option, settings.displayProp)}}</label></div></a>':'<span data-ng-class="{\'checkbox-ok\': isChecked(getPropertyForObject(option,settings.idProp))}" class="checkbox"></span> {{getPropertyForObject(option, settings.displayProp) | limitTo:settings.tooltipNumLimit}}</a>',template+="</li>",template+="</ul></li>",template+="</ul>",template+="</div>",element.html(template)},link:function($scope,$element,$attrs){function getFindObj(id){var findObj={};return""===$scope.settings.externalIdProp?findObj[$scope.settings.idProp]=id:findObj[$scope.settings.externalIdProp]=id,findObj}function clearObject(object){for(var prop in object)delete object[prop]}var monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];$scope.elementId=$attrs.id,$scope.groups=$attrs.groupBy?!0:!1,$scope.selectedRow=-1,$scope.groupSelectOption;var watchOptions,watchTranslationTexts,watchExtraSettings,$dropdownTrigger=$element.children()[0];$scope.toggleDropdown=function(){$scope.open=!$scope.open,$scope.open&&focus("focusInput")},$scope.checkboxClick=function($event,id){$scope.setSelectedItem(id),$event.stopImmediatePropagation()},$scope.externalEvents={onItemSelect:angular.noop,onItemDeselect:angular.noop,onSelectAll:angular.noop,onDeselectAll:angular.noop,onInitDone:angular.noop,onMaxSelectionReached:angular.noop},$scope.settings={dynamicTitle:!0,scrollable:!1,scrollableHeight:"300px",closeOnBlur:!0,displayProp:"label",idProp:"id",externalIdProp:"id",enableSearch:!1,selectionLimit:0,showCheckAll:!0,showUncheckAll:!0,closeOnSelect:!1,buttonClasses:"btn btn-default",closeOnDeselect:!1,groupBy:$attrs.groupBy||void 0,showModes:$attrs.showModes||!0,selectedGroup:$attrs.selectedGroup||void 0,groupByTextProvider:null,allowGroupSelect:!0,smartButtonMaxItems:0,smartButtonTextConverter:angular.noop,tooltipNumLimit:$scope.tooltipNumLimit?$scope.tooltipNumLimit:30,enableEmpty:!1},$scope.texts={checkAll:"Check All",uncheckAll:"Uncheck All",selectionCount:"checked",selectionOf:"/",searchPlaceholder:"Search...",buttonDefaultText:"Select",dynamicButtonTextSuffix:"checked",buttonAllDefaultText:null,buttonCustomDateText:null},$scope.searchFilter=$scope.searchFilter||"",$scope.itemsDisplayedInList=20,$scope.clearSelectedRow=function(val){$scope.selectedRow=-1},$scope.openGroup=!1,angular.extend($scope.settings,$scope.extraSettings||[]),angular.extend($scope.externalEvents,$scope.events||[]),angular.extend($scope.texts,$scope.translationTexts),watchTranslationTexts=$scope.$watch("translationTexts",function(translationTexts){angular.extend($scope.texts,translationTexts)}),watchExtraSettings=$scope.$watch("extraSettings",function(extraSettings){angular.extend($scope.settings,extraSettings)}),angular.isDefined($scope.settings.groupBy)&&(watchOptions=$scope.$watch("options",function(newValue){angular.isDefined(newValue)&&($scope.orderedItems=$filter("orderBy")(newValue,$scope.settings.groupBy))})),$scope.api&&"undefined"!=typeof $scope.api.selectedGroupKey&&($scope.selectedGroupKey=$scope.api.selectedGroupKey[0]),void 0===$scope.selectedGroupKey&&($scope.selectedGroupKey=!0),$scope.api&&($scope.api.selectedGroupSecondaryStorage||($scope.api.selectedGroupSecondaryStorage=[])),$scope.singleSelection=1===$scope.settings.selectionLimit,$scope.singleSelection&&$scope.selectedModel&&angular.isArray($scope.selectedModel)&&0===$scope.selectedModel.length&&clearObject($scope.selectedModel),$scope.clickHandler=function(e){for(var target=e.target.parentElement,parentFound=!1;angular.isDefined(target)&&null!==target&&!parentFound;)"string"==typeof target.className&&_.contains(target.className.split(" "),"multiselect-parent")&&!parentFound&&target===$dropdownTrigger&&(parentFound=!0),target=target.parentElement;parentFound||$scope.$apply(function(){$scope.open=!1})},$scope.settings.closeOnBlur&&$document.on("click.ngDropdownMultiselect",$scope.clickHandler),$scope.getGroupTitle=function(groupValue){return null!==$scope.settings.groupByTextProvider?$scope.settings.groupByTextProvider(groupValue):groupValue},$scope.checkDisabled=function(index){return $scope.options[index].dataBinding&&$scope.disabledItems.indexOf($scope.options[index].dataBinding)>-1?!0:!1},$scope.getButtonText=function(isBtnTitle){if($scope.settings.dynamicTitle&&$scope.selectedModel&&($scope.selectedModel.length>0||angular.isObject($scope.selectedModel)&&_.keys($scope.selectedModel).length>0)){if($scope.settings.smartButtonMaxItems>0){var itemsText=[];return $scope.options.length===$scope.selectedModel.length&&$scope.texts.buttonAllDefaultText?$scope.texts.buttonAllDefaultText:$scope.options[$scope.selectedModel.id]&&"custom"===$scope.options[$scope.selectedModel.id].value?$scope.texts.buttonCustomDateText:(angular.forEach($scope.options,function(optionItem){if($scope.isChecked($scope.getPropertyForObject(optionItem,$scope.settings.idProp))){if($scope.groups&&$scope.selectedGroupKey)var displayText=$scope.getPropertyForObject(optionItem,$scope.settings.groupBy);else{var displayText=$scope.getPropertyForObject(optionItem,$scope.settings.displayProp);if(isBtnTitle&&optionItem.displayDate){var startDate,endDate,startDayText,now=new Date;if("month"===optionItem.startDate?(startDate=new Date(now.getFullYear(),now.getMonth(),1),endDate=now):"lastmonth"===optionItem.startDate?(startDate=new Date((new Date).setDate((new Date).getDate()-optionItem.startDate)),endDate=new Date((new Date).setDate((new Date).getDate()-optionItem.endDate))):(startDate=new Date((new Date).setDate((new Date).getDate()-optionItem.startDate)),startDayText=monthNames[startDate.getMonth()]+" "+startDate.getDate()),optionItem.startDate!==optionItem.endDate){endDate=new Date((new Date).setDate((new Date).getDate()-optionItem.endDate));var endDateText=monthNames[endDate.getMonth()]+" "+endDate.getDate();startDayText=monthNames[startDate.getMonth()]+" "+startDate.getDate(),displayText+=": "+startDayText+" - "+endDateText}else startDayText=monthNames[startDate.getMonth()]+" "+startDate.getDate(),displayText+=": "+startDayText}}var converterResponse=$scope.settings.smartButtonTextConverter(displayText,optionItem);itemsText.push(converterResponse?converterResponse:displayText)}}),$scope.groups&&$scope.selectedGroupKey?(itemsText=_.uniq(itemsText),itemsText.length>$scope.settings.smartButtonMaxItems&&(itemsText=itemsText.slice(0,$scope.settings.smartButtonMaxItems),itemsText.push("..."))):$scope.selectedModel.length>$scope.settings.smartButtonMaxItems&&(itemsText=itemsText.slice(0,$scope.settings.smartButtonMaxItems),itemsText.push("...")),itemsText.join(", "))}var totalSelected;return totalSelected=$scope.singleSelection?null!==$scope.selectedModel&&angular.isDefined($scope.selectedModel[$scope.settings.idProp])?1:0:angular.isDefined($scope.selectedModel)?$scope.selectedModel.length:0,0===totalSelected?$scope.texts.buttonDefaultText:totalSelected+" "+$scope.texts.dynamicButtonTextSuffix}return $scope.texts.buttonDefaultText},$scope.getPropertyForObject=function(object,property){return angular.isDefined(object)&&object.hasOwnProperty(property)?object[property]:""},$scope.selectAll=function(inGroup){$scope.deselectAll(!1),$scope.externalEvents.onSelectAll(),angular.forEach($scope.options,function(value){$scope.setSelectedItem(value[$scope.settings.idProp],!0)})},$scope.deselectAll=function(sendEvent){sendEvent=sendEvent||!0,sendEvent&&$scope.externalEvents.onDeselectAll(),$scope.singleSelection?clearObject($scope.selectedModel):$scope.selectedModel.splice(0,$scope.selectedModel.length)},$scope.selectOrdeselectAll=function(inGroup,dontRemove){angular.forEach($scope.options,function(value){inGroup&&value[$scope.settings.groupBy]!==inGroup||$scope.setSelectedItem(value[$scope.settings.idProp],dontRemove)})},$scope.selectAllInGroup=function(inGroup,dontRemove){angular.forEach($scope.options,function(item){item[$scope.settings.groupBy]===inGroup&&$scope.setSelectedItem(item[$scope.settings.idProp],!0)})},$scope.deselectAllInGroup=function(inGroup,dontRemove){$scope.options.forEach(function(item){if(item[$scope.settings.groupBy]===inGroup){var index=_.findIndex($scope.selectedModel,function(obj){return obj.id===item.id});index>-1&&$scope.selectedModel.splice(index,1)}})},$scope.setSelectedItem=function(id,dontRemove){var findObj=getFindObj(id),finalObj=null;if(finalObj=""===$scope.settings.externalIdProp?_.find($scope.options,findObj):findObj,$scope.singleSelection)return clearObject($scope.selectedModel),angular.extend($scope.selectedModel,finalObj),$scope.externalEvents.onItemSelect(finalObj,$scope.index,$scope.dependency),void($scope.settings.closeOnSelect&&($scope.open=!1));dontRemove=dontRemove||!1;var exists=-1!==_.findIndex($scope.selectedModel,findObj);!dontRemove&&exists?($scope.selectedModel.splice(_.findIndex($scope.selectedModel,findObj),1),$scope.externalEvents.onItemDeselect(findObj)):!exists&&(0===$scope.settings.selectionLimit||$scope.selectedModel.length<$scope.settings.selectionLimit)&&($scope.selectedModel.push(finalObj),$scope.externalEvents.onItemSelect(finalObj)),$scope.settings.closeOnSelect&&($scope.open=!1)},$scope.isChecked=function(id){return $scope.singleSelection?null!==$scope.selectedModel&&angular.isDefined($scope.selectedModel[$scope.settings.idProp])&&$scope.selectedModel[$scope.settings.idProp]===getFindObj(id)[$scope.settings.idProp]:-1!==_.findIndex($scope.selectedModel,getFindObj(id))},$scope.isCheckedAll=function(){var length=0;return length=$scope.orderedItems?$scope.orderedItems.length:$scope.options.length,$scope.selectedModel.length===length},$scope.isCheckedGroup=function(groupName){if($scope.selectedModel.length>=1){var groupTotal=0,selectedGroupTotal=0;return $scope.orderedItems.forEach(function(item){item[$scope.settings.groupBy]===groupName&&groupTotal++}),$scope.selectedModel.forEach(function(item){item[$scope.settings.groupBy]===groupName&&selectedGroupTotal++}),selectedGroupTotal===groupTotal}return!1},$scope.isCheckedGroupPart=function(groupName){if($scope.selectedModel.length>=1){var groupTotal=0,selectedGroupTotal=0;return $scope.orderedItems.forEach(function(item){item[$scope.settings.groupBy]===groupName&&groupTotal++}),$scope.selectedModel.forEach(function(item){item[$scope.settings.groupBy]===groupName&&selectedGroupTotal++}),groupTotal>selectedGroupTotal&&selectedGroupTotal>0}return!1},$scope.setGroupSelectOption=function(selectOption){if($scope.groupSelectOption!==selectOption&&($scope.groupSelectOption=selectOption,selectOption===$scope.settings.groupKey?$scope.selectedGroupKey=!0:selectOption===$scope.settings.displayProp?$scope.selectedGroupKey=!1:"toggle"===selectOption&&($scope.selectedGroupKey?$scope.selectedGroupKey=!1:$scope.selectedGroupKey=!0),$scope.api&&"undefined"!=typeof $scope.api.selectedGroupKey)){$scope.api.selectedGroupKey=$scope.selectedGroupKey,$scope.api.selectedGroupKeyFunction($scope.selectedGroupKey);var tempStorage=[];tempStorage=$scope.selectedModel.slice(0),$scope.selectedModel.splice(0,$scope.selectedModel.length),angular.extend($scope.selectedModel,$scope.selectedTempModel.slice(0)),$scope.selectedTempModel.splice(0,$scope.selectedTempModel.length),angular.extend($scope.selectedTempModel,tempStorage.slice(0))}},$scope.groupTitleEvent=function(inGroup,dontRemove){$scope.selectedGroupKey?$scope.selectOrdeselectAll(inGroup,dontRemove):this.openGroup=!this.openGroup},$scope.groupCheckboxEvent=function(inGroup,dontRemove,$event){$scope.selectedGroupKey||($scope.selectOrdeselectAll(inGroup,dontRemove),this.openGroup?this.openGroup=!0:this.openGroup=!1,$event.stopPropagation())},$scope.api&&($scope.api.toggleDropdown=function(){$scope.toggleDropdown()}),$scope.addMoreItems=function(){$scope.itemsDisplayedInList+=1},$scope.getInfiniteScrollContainer=function(){return"#"+$scope.elementId+"-multiselect-wrapper"},$scope.clickedRow=function(name){$scope.options.forEach(function(option){var tmpName=$scope.getPropertyForObject(option,$scope.settings.displayProp);tmpName===name&&$scope.setSelectedItem(option.id)})},"undefined"!=typeof $scope.settings.selectedGroup&&$scope.setGroupSelectOption($scope.settings.selectedGroup),$scope.$on("$destroy",function(){$dropdownTrigger=null,$document.off("click.ngDropdownMultiselect",$scope.clickHandler),watchOptions&&watchOptions(),watchTranslationTexts&&watchTranslationTexts(),watchExtraSettings&&watchExtraSettings()}),$scope.externalEvents.onInitDone()}}}]),directiveModule.directive("arrowSelector",["$document",function($document){return{restrict:"A",link:function(scope,elem,attrs,ctrl){var elemFocus=!1;scope.mouseenterHandler=function(){elemFocus=!0},scope.mouseleaveHandler=function(){elemFocus=!1,scope.selectedRow=-1},scope.keydownHandler=function(e){if(elemFocus)if(38==e.keyCode){if(0==scope.selectedRow)return;scope.selectedRow--,scope.$apply(),e.preventDefault()}else if(40==e.keyCode){if(scope.selectedRow==scope.options.length-1)return;scope.selectedRow++,scope.$apply(),e.preventDefault()}else if(13==e.keyCode&&scope.selectedRow>-1){var name=elem.find("li.dropdown-multiselect-selected").children("a").attr("tooltip");scope.clickedRow(name),scope.$apply(),e.preventDefault()}},elem.on("mouseenter.ngDropdownMultiselect",scope.mouseenterHandler),elem.on("mouseleave.ngDropdownMultiselect",scope.mouseleaveHandler),$document.bind("keydown.ngDropdownMultiselect",scope.keydownHandler),scope.$on("$destroy",function(){elem.off("mouseenter.ngDropdownMultiselect",scope.mouseenterHandler),elem.off("mouseleave.ngDropdownMultiselect",scope.mouseleaveHandler),$document.off("keydown.ngDropdownMultiselect",scope.keydownHandler)})}}}]);